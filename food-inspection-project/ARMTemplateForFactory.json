{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "food-inspection-project"
		},
		"FoodInspectionDL_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'FoodInspectionDL'"
		},
		"FoodInspectionDL_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://foodinspection2025stg.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_data_cleaning')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_data_cleaning_dallas",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_data_cleaning_dallas",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {},
									"zipcodes": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_Chicago_Cleaning",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "df_data_cleaning_dallas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Chicago_Cleaning",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"bronzeChicagoTSV": {},
									"chicagoZipcodes": {},
									"silverChicagoParquet": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_data_cleaning_dallas')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Chicago_Cleaning')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/chicago_bronze')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FoodInspectionDL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "combined_chicago.tsv",
						"fileSystem": "bronze"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Inspection ID\tDBA Name\tAKA Name\tLicense #\tFacility Type\tRisk\tAddress\tCity\tState\tZip\tInspection Date\tInspection Type\tResults\tViolations\tLatitude\tLongitude\tLocation",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FoodInspectionDL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/chicago_parquet_silver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FoodInspectionDL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "restaurant_name",
						"type": "UTF8"
					},
					{
						"name": "inspection_type",
						"type": "UTF8"
					},
					{
						"name": "inspection_score",
						"type": "INT32"
					},
					{
						"name": "inspection_date",
						"type": "DATE"
					},
					{
						"name": "zipcode",
						"type": "INT32"
					},
					{
						"name": "street_address",
						"type": "UTF8"
					},
					{
						"name": "violation_description1",
						"type": "UTF8"
					},
					{
						"name": "violation_description2",
						"type": "UTF8"
					},
					{
						"name": "violation_description3",
						"type": "UTF8"
					},
					{
						"name": "violation_description4",
						"type": "UTF8"
					},
					{
						"name": "violation_description5",
						"type": "UTF8"
					},
					{
						"name": "violation_description6",
						"type": "UTF8"
					},
					{
						"name": "violation_description7",
						"type": "UTF8"
					},
					{
						"name": "violation_description8",
						"type": "UTF8"
					},
					{
						"name": "violation_description9",
						"type": "UTF8"
					},
					{
						"name": "violation_description10",
						"type": "UTF8"
					},
					{
						"name": "violation_description11",
						"type": "UTF8"
					},
					{
						"name": "violation_description12",
						"type": "UTF8"
					},
					{
						"name": "violation_description13",
						"type": "UTF8"
					},
					{
						"name": "violation_description14",
						"type": "UTF8"
					},
					{
						"name": "violation_description15",
						"type": "UTF8"
					},
					{
						"name": "violation_description16",
						"type": "UTF8"
					},
					{
						"name": "violation_description17",
						"type": "UTF8"
					},
					{
						"name": "violation_description18",
						"type": "UTF8"
					},
					{
						"name": "violation_description19",
						"type": "UTF8"
					},
					{
						"name": "violation_description20",
						"type": "UTF8"
					},
					{
						"name": "violation_description21",
						"type": "UTF8"
					},
					{
						"name": "violation_description22",
						"type": "UTF8"
					},
					{
						"name": "violation_description23",
						"type": "UTF8"
					},
					{
						"name": "violation_description24",
						"type": "UTF8"
					},
					{
						"name": "violation_description25",
						"type": "UTF8"
					},
					{
						"name": "violation_detail1",
						"type": "UTF8"
					},
					{
						"name": "violation_detail2",
						"type": "UTF8"
					},
					{
						"name": "violation_detail3",
						"type": "UTF8"
					},
					{
						"name": "violation_detail4",
						"type": "UTF8"
					},
					{
						"name": "violation_detail5",
						"type": "UTF8"
					},
					{
						"name": "violation_detail6",
						"type": "UTF8"
					},
					{
						"name": "violation_detail7",
						"type": "UTF8"
					},
					{
						"name": "violation_detail8",
						"type": "UTF8"
					},
					{
						"name": "violation_detail9",
						"type": "UTF8"
					},
					{
						"name": "violation_detail10",
						"type": "UTF8"
					},
					{
						"name": "violation_detail11",
						"type": "UTF8"
					},
					{
						"name": "violation_detail12",
						"type": "UTF8"
					},
					{
						"name": "violation_detail13",
						"type": "UTF8"
					},
					{
						"name": "violation_detail14",
						"type": "UTF8"
					},
					{
						"name": "violation_detail15",
						"type": "UTF8"
					},
					{
						"name": "violation_detail16",
						"type": "UTF8"
					},
					{
						"name": "violation_detail17",
						"type": "UTF8"
					},
					{
						"name": "violation_detail18",
						"type": "UTF8"
					},
					{
						"name": "violation_detail19",
						"type": "UTF8"
					},
					{
						"name": "violation_detail20",
						"type": "UTF8"
					},
					{
						"name": "violation_detail21",
						"type": "UTF8"
					},
					{
						"name": "violation_detail22",
						"type": "UTF8"
					},
					{
						"name": "violation_detail23",
						"type": "UTF8"
					},
					{
						"name": "violation_detail24",
						"type": "UTF8"
					},
					{
						"name": "violation_detail25",
						"type": "UTF8"
					},
					{
						"name": "violation_memo1",
						"type": "UTF8"
					},
					{
						"name": "violation_memo2",
						"type": "UTF8"
					},
					{
						"name": "violation_memo3",
						"type": "UTF8"
					},
					{
						"name": "violation_memo4",
						"type": "UTF8"
					},
					{
						"name": "violation_memo5",
						"type": "UTF8"
					},
					{
						"name": "violation_memo6",
						"type": "UTF8"
					},
					{
						"name": "violation_memo7",
						"type": "UTF8"
					},
					{
						"name": "violation_memo8",
						"type": "UTF8"
					},
					{
						"name": "violation_memo9",
						"type": "UTF8"
					},
					{
						"name": "violation_memo10",
						"type": "UTF8"
					},
					{
						"name": "violation_memo11",
						"type": "UTF8"
					},
					{
						"name": "violation_memo12",
						"type": "UTF8"
					},
					{
						"name": "violation_memo13",
						"type": "UTF8"
					},
					{
						"name": "violation_memo14",
						"type": "UTF8"
					},
					{
						"name": "violation_memo15",
						"type": "UTF8"
					},
					{
						"name": "violation_memo16",
						"type": "UTF8"
					},
					{
						"name": "violation_memo17",
						"type": "UTF8"
					},
					{
						"name": "violation_memo18",
						"type": "UTF8"
					},
					{
						"name": "violation_memo19",
						"type": "UTF8"
					},
					{
						"name": "violation_memo21",
						"type": "UTF8"
					},
					{
						"name": "violation_memo22",
						"type": "UTF8"
					},
					{
						"name": "violation_memo23",
						"type": "UTF8"
					},
					{
						"name": "violation_memo24",
						"type": "UTF8"
					},
					{
						"name": "violation_memo25",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FoodInspectionDL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/chicago_zipcodes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FoodInspectionDL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "chicago_zipcodes.csv",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "zipcode",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FoodInspectionDL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dallas')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FoodInspectionDL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "combined_dallas.tsv",
						"fileSystem": "bronze"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Restaurant Name",
						"type": "String"
					},
					{
						"name": "Inspection Type",
						"type": "String"
					},
					{
						"name": "Inspection Date",
						"type": "String"
					},
					{
						"name": "Inspection Score",
						"type": "String"
					},
					{
						"name": "Street Number",
						"type": "String"
					},
					{
						"name": "Street Name",
						"type": "String"
					},
					{
						"name": "Street Direction",
						"type": "String"
					},
					{
						"name": "Street Type",
						"type": "String"
					},
					{
						"name": "Street Unit",
						"type": "String"
					},
					{
						"name": "Street Address",
						"type": "String"
					},
					{
						"name": "Zip Code",
						"type": "String"
					},
					{
						"name": "Violation Description - 1",
						"type": "String"
					},
					{
						"name": "Violation Points - 1",
						"type": "String"
					},
					{
						"name": "Violation Detail - 1",
						"type": "String"
					},
					{
						"name": "Violation Memo - 1",
						"type": "String"
					},
					{
						"name": "Violation Description - 2",
						"type": "String"
					},
					{
						"name": "Violation Points - 2",
						"type": "String"
					},
					{
						"name": "Violation Detail - 2",
						"type": "String"
					},
					{
						"name": "Violation Memo - 2",
						"type": "String"
					},
					{
						"name": "Violation Description - 3",
						"type": "String"
					},
					{
						"name": "Violation Points - 3",
						"type": "String"
					},
					{
						"name": "Violation Detail - 3",
						"type": "String"
					},
					{
						"name": "Violation Memo - 3",
						"type": "String"
					},
					{
						"name": "Violation Description - 4",
						"type": "String"
					},
					{
						"name": "Violation Points - 4",
						"type": "String"
					},
					{
						"name": "Violation Detail - 4",
						"type": "String"
					},
					{
						"name": "Violation Memo - 4",
						"type": "String"
					},
					{
						"name": "Violation Description - 5",
						"type": "String"
					},
					{
						"name": "Violation Points - 5",
						"type": "String"
					},
					{
						"name": "Violation Detail - 5",
						"type": "String"
					},
					{
						"name": "Violation Memo - 5",
						"type": "String"
					},
					{
						"name": "Violation Description - 6",
						"type": "String"
					},
					{
						"name": "Violation Points - 6",
						"type": "String"
					},
					{
						"name": "Violation Detail - 6",
						"type": "String"
					},
					{
						"name": "Violation Memo - 6",
						"type": "String"
					},
					{
						"name": "Violation Description - 7",
						"type": "String"
					},
					{
						"name": "Violation Points - 7",
						"type": "String"
					},
					{
						"name": "Violation Detail - 7",
						"type": "String"
					},
					{
						"name": "Violation Memo - 7",
						"type": "String"
					},
					{
						"name": "Violation Description - 8",
						"type": "String"
					},
					{
						"name": "Violation Points - 8",
						"type": "String"
					},
					{
						"name": "Violation Detail - 8",
						"type": "String"
					},
					{
						"name": "Violation Memo - 8",
						"type": "String"
					},
					{
						"name": "Violation Description - 9",
						"type": "String"
					},
					{
						"name": "Violation Points - 9",
						"type": "String"
					},
					{
						"name": "Violation Detail - 9",
						"type": "String"
					},
					{
						"name": "Violation Memo - 9",
						"type": "String"
					},
					{
						"name": "Violation Description - 10",
						"type": "String"
					},
					{
						"name": "Violation Points - 10",
						"type": "String"
					},
					{
						"name": "Violation Detail - 10",
						"type": "String"
					},
					{
						"name": "Violation Memo - 10",
						"type": "String"
					},
					{
						"name": "Violation Description - 11",
						"type": "String"
					},
					{
						"name": "Violation Points - 11",
						"type": "String"
					},
					{
						"name": "Violation Detail - 11",
						"type": "String"
					},
					{
						"name": "Violation Memo - 11",
						"type": "String"
					},
					{
						"name": "Violation Description - 12",
						"type": "String"
					},
					{
						"name": "Violation Points - 12",
						"type": "String"
					},
					{
						"name": "Violation Detail - 12",
						"type": "String"
					},
					{
						"name": "Violation Memo - 12",
						"type": "String"
					},
					{
						"name": "Violation Description - 13",
						"type": "String"
					},
					{
						"name": "Violation Points - 13",
						"type": "String"
					},
					{
						"name": "Violation Detail - 13",
						"type": "String"
					},
					{
						"name": "Violation Memo - 13",
						"type": "String"
					},
					{
						"name": "Violation Description - 14",
						"type": "String"
					},
					{
						"name": "Violation Points - 14",
						"type": "String"
					},
					{
						"name": "Violation Detail - 14",
						"type": "String"
					},
					{
						"name": "Violation Memo - 14",
						"type": "String"
					},
					{
						"name": "Violation Description - 15",
						"type": "String"
					},
					{
						"name": "Violation Points - 15",
						"type": "String"
					},
					{
						"name": "Violation Detail - 15",
						"type": "String"
					},
					{
						"name": "Violation Memo - 15",
						"type": "String"
					},
					{
						"name": "Violation Description - 16",
						"type": "String"
					},
					{
						"name": "Violation Points - 16",
						"type": "String"
					},
					{
						"name": "Violation Detail - 16",
						"type": "String"
					},
					{
						"name": "Violation Memo - 16",
						"type": "String"
					},
					{
						"name": "Violation Description - 17",
						"type": "String"
					},
					{
						"name": "Violation Points - 17",
						"type": "String"
					},
					{
						"name": "Violation Detail - 17",
						"type": "String"
					},
					{
						"name": "Violation Memo - 17",
						"type": "String"
					},
					{
						"name": "Violation Description - 18",
						"type": "String"
					},
					{
						"name": "Violation Points - 18",
						"type": "String"
					},
					{
						"name": "Violation Detail - 18",
						"type": "String"
					},
					{
						"name": "Violation Memo - 18",
						"type": "String"
					},
					{
						"name": "Violation Description - 19",
						"type": "String"
					},
					{
						"name": "Violation Points - 19",
						"type": "String"
					},
					{
						"name": "Violation Detail - 19",
						"type": "String"
					},
					{
						"name": "Violation Memo - 19",
						"type": "String"
					},
					{
						"name": "Violation Description - 20",
						"type": "String"
					},
					{
						"name": "Violation Points - 20",
						"type": "String"
					},
					{
						"name": "Violation Detail - 20",
						"type": "String"
					},
					{
						"name": "Violation  Memo - 20",
						"type": "String"
					},
					{
						"name": "Violation Description - 21",
						"type": "String"
					},
					{
						"name": "Violation Points - 21",
						"type": "String"
					},
					{
						"name": "Violation Detail - 21",
						"type": "String"
					},
					{
						"name": "Violation Memo - 21",
						"type": "String"
					},
					{
						"name": "Violation Description - 22",
						"type": "String"
					},
					{
						"name": "Violation Points - 22",
						"type": "String"
					},
					{
						"name": "Violation Detail - 22",
						"type": "String"
					},
					{
						"name": "Violation Memo - 22",
						"type": "String"
					},
					{
						"name": "Violation Description - 23",
						"type": "String"
					},
					{
						"name": "Violation Points - 23",
						"type": "String"
					},
					{
						"name": "Violation Detail - 23",
						"type": "String"
					},
					{
						"name": "Violation Memo - 23",
						"type": "String"
					},
					{
						"name": "Violation Description - 24",
						"type": "String"
					},
					{
						"name": "Violation Points - 24",
						"type": "String"
					},
					{
						"name": "Violation Detail - 24",
						"type": "String"
					},
					{
						"name": "Violation Memo - 24",
						"type": "String"
					},
					{
						"name": "Violation Description - 25",
						"type": "String"
					},
					{
						"name": "Violation Points - 25",
						"type": "String"
					},
					{
						"name": "Violation Detail - 25",
						"type": "String"
					},
					{
						"name": "Violation Memo - 25",
						"type": "String"
					},
					{
						"name": "Inspection Month",
						"type": "String"
					},
					{
						"name": "Inspection Year",
						"type": "String"
					},
					{
						"name": "Lat Long Location",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FoodInspectionDL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dallas_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FoodInspectionDL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FoodInspectionDL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dallas_zipcodes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FoodInspectionDL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dallas_zipcodes.csv",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "zipcode",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FoodInspectionDL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_parquet_dallas')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "FoodInspectionDL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FoodInspectionDL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FoodInspectionDL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('FoodInspectionDL_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('FoodInspectionDL_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/triggerDataCleanPl')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_data_cleaning",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2025-04-18T04:24:00",
						"endTime": "2025-04-26T04:24:00",
						"timeZone": "Eastern Standard Time",
						"schedule": {
							"monthDays": [
								30
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_data_cleaning')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Chicago_Cleaning')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "chicago_bronze",
								"type": "DatasetReference"
							},
							"name": "bronzeChicagoTSV"
						},
						{
							"dataset": {
								"referenceName": "chicago_zipcodes",
								"type": "DatasetReference"
							},
							"name": "chicagoZipcodes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "chicago_parquet_silver",
								"type": "DatasetReference"
							},
							"name": "silverChicagoParquet"
						}
					],
					"transformations": [
						{
							"name": "joinWithValidChicagoZipcodes"
						},
						{
							"name": "filterOutNonChicagoCityRecords"
						},
						{
							"name": "handlingNullValues"
						},
						{
							"name": "finalColumnSelection"
						},
						{
							"name": "handlingStateColumnNulls"
						},
						{
							"name": "allKeyDerivedColumn"
						},
						{
							"name": "rowNumWindow"
						},
						{
							"name": "filterDuplicateRows"
						},
						{
							"name": "columnsSelection"
						},
						{
							"name": "columnLookups"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Inspection ID} as integer,",
						"          {DBA Name} as string,",
						"          {AKA Name} as string,",
						"          {License #} as integer,",
						"          {Facility Type} as string,",
						"          Risk as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          Zip as integer,",
						"          {Inspection Date} as date,",
						"          {Inspection Type} as string,",
						"          Results as string,",
						"          Violations as string,",
						"          Latitude as string,",
						"          Longitude as string,",
						"          Location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> bronzeChicagoTSV",
						"source(output(",
						"          zipcode as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> chicagoZipcodes",
						"columnsSelection, chicagoZipcodes join(zip == zipcode,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinWithValidChicagoZipcodes",
						"joinWithValidChicagoZipcodes filter(isNull(city) || instr(lower(city), 'chicago') != 0) ~> filterOutNonChicagoCityRecords",
						"columnLookups derive(business_name = iif(isNull(business_name) || trim(business_name)=='', 'Unknown', business_name),",
						"          city = iif(isNull(city), 'Unknown', 'Chicago'),",
						"          license_number = iif(\r",
						"    isNull(license_number) || license_number == 0,\r",
						"    -9999,\r",
						"    license_number\r",
						"),",
						"          risk = iif(\r",
						"    risk == 'Risk 1 (High)', 'High',\r",
						"    iif(\r",
						"        risk == 'Risk 2 (Medium)', 'Medium',\r",
						"        iif(\r",
						"            risk == 'Risk 3 (Low)', 'Low',\r",
						"            iif(\r",
						"                risk == 'All', 'Invalid',\r",
						"                'Unknown'\r",
						"            )\r",
						"        )\r",
						"    )\r",
						"),",
						"          facility_type = iif(\r",
						"    isNull(facility_type) || trim(facility_type) == '', \r",
						"    'Unknown', \r",
						"    facility_type\r",
						"),",
						"          zipcode = iif(isNull(zipcode), toInteger(-99999), toInteger(zipcode)),",
						"          violations = iif(isNull(violations), 'Unknown', violations)) ~> handlingNullValues",
						"handlingStateColumnNulls select(mapColumn(",
						"          inspection_id,",
						"          business_name,",
						"          license_number,",
						"          facility_type,",
						"          risk,",
						"          street_address = address,",
						"          city,",
						"          state,",
						"          zipcode,",
						"          inspection_date,",
						"          inspection_type,",
						"          result = results,",
						"          violations",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> finalColumnSelection",
						"handlingNullValues derive(state = iif(",
						"    lower(city) == 'chicago', ",
						"    'IL',",
						"    iif(",
						"        isNull(state) && lower(city) == 'unknown',",
						"        'Unknown',",
						"        state",
						"    )",
						")) ~> handlingStateColumnNulls",
						"bronzeChicagoTSV derive(allKey = sha2(256, columns())) ~> allKeyDerivedColumn",
						"allKeyDerivedColumn window(over(allKey),",
						"     asc(1, true),",
						"     row_num = rowNumber()) ~> rowNumWindow",
						"rowNumWindow filter(row_num == 1) ~> filterDuplicateRows",
						"filterDuplicateRows select(mapColumn(",
						"          inspection_id = {Inspection ID},",
						"          business_name = {DBA Name},",
						"          license_number = {License #},",
						"          facility_type = {Facility Type},",
						"          risk = Risk,",
						"          address = Address,",
						"          city = City,",
						"          state = State,",
						"          zip = Zip,",
						"          inspection_date = {Inspection Date},",
						"          inspection_type = {Inspection Type},",
						"          results = Results,",
						"          violations = Violations,",
						"          aka_name = {AKA Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> columnsSelection",
						"filterOutNonChicagoCityRecords derive(business_name = iif(\r",
						"    regexMatch(business_name, '^[0-9]+$') &&\r",
						"    (isNull(aka_name) || regexMatch(aka_name, '^[0-9]+$')),\r",
						"    'Unknown',\r",
						"    iif(\r",
						"        regexMatch(business_name, '^[0-9]+$') && !regexMatch(aka_name, '^[0-9]+$'),\r",
						"        aka_name,\r",
						"        business_name\r",
						"    )\r",
						"),",
						"          city = iif(\r",
						"    isNull(city) && !isNull(zipcode),\r",
						"    'Chicago',\r",
						"    city\r",
						")) ~> columnLookups",
						"finalColumnSelection sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          restaurant_name as string,",
						"          inspection_type as string,",
						"          inspection_score as integer,",
						"          inspection_date as date,",
						"          zipcode as integer,",
						"          street_address as string,",
						"          violation_description1 as string,",
						"          violation_description2 as string,",
						"          violation_description3 as string,",
						"          violation_description4 as string,",
						"          violation_description5 as string,",
						"          violation_description6 as string,",
						"          violation_description7 as string,",
						"          violation_description8 as string,",
						"          violation_description9 as string,",
						"          violation_description10 as string,",
						"          violation_description11 as string,",
						"          violation_description12 as string,",
						"          violation_description13 as string,",
						"          violation_description14 as string,",
						"          violation_description15 as string,",
						"          violation_description16 as string,",
						"          violation_description17 as string,",
						"          violation_description18 as string,",
						"          violation_description19 as string,",
						"          violation_description20 as string,",
						"          violation_description21 as string,",
						"          violation_description22 as string,",
						"          violation_description23 as string,",
						"          violation_description24 as string,",
						"          violation_description25 as string,",
						"          violation_detail1 as string,",
						"          violation_detail2 as string,",
						"          violation_detail3 as string,",
						"          violation_detail4 as string,",
						"          violation_detail5 as string,",
						"          violation_detail6 as string,",
						"          violation_detail7 as string,",
						"          violation_detail8 as string,",
						"          violation_detail9 as string,",
						"          violation_detail10 as string,",
						"          violation_detail11 as string,",
						"          violation_detail12 as string,",
						"          violation_detail13 as string,",
						"          violation_detail14 as string,",
						"          violation_detail15 as string,",
						"          violation_detail16 as string,",
						"          violation_detail17 as string,",
						"          violation_detail18 as string,",
						"          violation_detail19 as string,",
						"          violation_detail20 as string,",
						"          violation_detail21 as string,",
						"          violation_detail22 as string,",
						"          violation_detail23 as string,",
						"          violation_detail24 as string,",
						"          violation_detail25 as string,",
						"          violation_memo1 as string,",
						"          violation_memo2 as string,",
						"          violation_memo3 as string,",
						"          violation_memo4 as string,",
						"          violation_memo5 as string,",
						"          violation_memo6 as string,",
						"          violation_memo7 as string,",
						"          violation_memo8 as string,",
						"          violation_memo9 as string,",
						"          violation_memo10 as string,",
						"          violation_memo11 as string,",
						"          violation_memo12 as string,",
						"          violation_memo13 as string,",
						"          violation_memo14 as string,",
						"          violation_memo15 as string,",
						"          violation_memo16 as string,",
						"          violation_memo17 as string,",
						"          violation_memo18 as string,",
						"          violation_memo19 as string,",
						"          violation_memo21 as string,",
						"          violation_memo22 as string,",
						"          violation_memo23 as string,",
						"          violation_memo24 as string,",
						"          violation_memo25 as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['chicago_parquet.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> silverChicagoParquet"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/chicago_bronze')]",
				"[concat(variables('factoryId'), '/datasets/chicago_zipcodes')]",
				"[concat(variables('factoryId'), '/datasets/chicago_parquet_silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_data_cleaning_dallas')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_dallas",
								"type": "DatasetReference"
							},
							"name": "source"
						},
						{
							"dataset": {
								"referenceName": "ds_dallas_zipcodes",
								"type": "DatasetReference"
							},
							"name": "zipcodes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_parquet_dallas",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "derivedColumns1"
						},
						{
							"name": "derivedColumns3"
						},
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "window1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Restaurant Name} as string,",
						"          {Inspection Type} as string,",
						"          {Inspection Date} as date,",
						"          {Inspection Score} as short,",
						"          {Street Number} as integer,",
						"          {Street Name} as string,",
						"          {Street Direction} as string,",
						"          {Street Type} as string,",
						"          {Street Unit} as string,",
						"          {Street Address} as string,",
						"          {Zip Code} as string,",
						"          {Violation Description - 1} as string,",
						"          {Violation Points - 1} as double,",
						"          {Violation Detail - 1} as string,",
						"          {Violation Memo - 1} as string,",
						"          {Violation Description - 2} as string,",
						"          {Violation Points - 2} as double,",
						"          {Violation Detail - 2} as string,",
						"          {Violation Memo - 2} as string,",
						"          {Violation Description - 3} as string,",
						"          {Violation Points - 3} as double,",
						"          {Violation Detail - 3} as string,",
						"          {Violation Memo - 3} as string,",
						"          {Violation Description - 4} as string,",
						"          {Violation Points - 4} as double,",
						"          {Violation Detail - 4} as string,",
						"          {Violation Memo - 4} as string,",
						"          {Violation Description - 5} as string,",
						"          {Violation Points - 5} as double,",
						"          {Violation Detail - 5} as string,",
						"          {Violation Memo - 5} as string,",
						"          {Violation Description - 6} as string,",
						"          {Violation Points - 6} as double,",
						"          {Violation Detail - 6} as string,",
						"          {Violation Memo - 6} as string,",
						"          {Violation Description - 7} as string,",
						"          {Violation Points - 7} as double,",
						"          {Violation Detail - 7} as string,",
						"          {Violation Memo - 7} as string,",
						"          {Violation Description - 8} as string,",
						"          {Violation Points - 8} as double,",
						"          {Violation Detail - 8} as string,",
						"          {Violation Memo - 8} as string,",
						"          {Violation Description - 9} as string,",
						"          {Violation Points - 9} as double,",
						"          {Violation Detail - 9} as string,",
						"          {Violation Memo - 9} as string,",
						"          {Violation Description - 10} as string,",
						"          {Violation Points - 10} as double,",
						"          {Violation Detail - 10} as string,",
						"          {Violation Memo - 10} as string,",
						"          {Violation Description - 11} as string,",
						"          {Violation Points - 11} as double,",
						"          {Violation Detail - 11} as string,",
						"          {Violation Memo - 11} as string,",
						"          {Violation Description - 12} as string,",
						"          {Violation Points - 12} as double,",
						"          {Violation Detail - 12} as string,",
						"          {Violation Memo - 12} as string,",
						"          {Violation Description - 13} as string,",
						"          {Violation Points - 13} as double,",
						"          {Violation Detail - 13} as string,",
						"          {Violation Memo - 13} as string,",
						"          {Violation Description - 14} as string,",
						"          {Violation Points - 14} as double,",
						"          {Violation Detail - 14} as string,",
						"          {Violation Memo - 14} as string,",
						"          {Violation Description - 15} as string,",
						"          {Violation Points - 15} as double,",
						"          {Violation Detail - 15} as string,",
						"          {Violation Memo - 15} as string,",
						"          {Violation Description - 16} as string,",
						"          {Violation Points - 16} as double,",
						"          {Violation Detail - 16} as string,",
						"          {Violation Memo - 16} as string,",
						"          {Violation Description - 17} as string,",
						"          {Violation Points - 17} as double,",
						"          {Violation Detail - 17} as string,",
						"          {Violation Memo - 17} as string,",
						"          {Violation Description - 18} as string,",
						"          {Violation Points - 18} as double,",
						"          {Violation Detail - 18} as string,",
						"          {Violation Memo - 18} as string,",
						"          {Violation Description - 19} as string,",
						"          {Violation Points - 19} as double,",
						"          {Violation Detail - 19} as string,",
						"          {Violation Memo - 19} as string,",
						"          {Violation Description - 20} as string,",
						"          {Violation Points - 20} as double,",
						"          {Violation Detail - 20} as string,",
						"          {Violation  Memo - 20} as string,",
						"          {Violation Description - 21} as string,",
						"          {Violation Points - 21} as double,",
						"          {Violation Detail - 21} as string,",
						"          {Violation Memo - 21} as string,",
						"          {Violation Description - 22} as string,",
						"          {Violation Points - 22} as string,",
						"          {Violation Detail - 22} as string,",
						"          {Violation Memo - 22} as string,",
						"          {Violation Description - 23} as string,",
						"          {Violation Points - 23} as string,",
						"          {Violation Detail - 23} as string,",
						"          {Violation Memo - 23} as string,",
						"          {Violation Description - 24} as string,",
						"          {Violation Points - 24} as string,",
						"          {Violation Detail - 24} as string,",
						"          {Violation Memo - 24} as string,",
						"          {Violation Description - 25} as string,",
						"          {Violation Points - 25} as string,",
						"          {Violation Detail - 25} as string,",
						"          {Violation Memo - 25} as string,",
						"          {Inspection Month} as string,",
						"          {Inspection Year} as string,",
						"          {Lat Long Location} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     multiLineRow: true) ~> source",
						"source(output(",
						"          zipcode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> zipcodes",
						"filter1 derive(restaurant_name = iif({Restaurant Name} == '3606' || {Restaurant Name} == '13209', 'Unknown', {Restaurant Name}),",
						"          inspection_score = abs(toInteger({Inspection Score})),",
						"          zip_code = toInteger(substring({Zip Code}, 0, 5))) ~> derivedColumns1",
						"derivedColumn1 derive(each(match(startsWith(name,'Violation Description')), $$ = iif(",
						"  isNull($$),",
						"  'Unknown',",
						"  regexReplace($$, '\\\\*', '')",
						")),",
						"          each(match(startsWith(name,'Violation Detail')||startsWith(name,'Violation Memo')), $$ = iif(",
						"  isNull($$),",
						"  'Unknown',",
						"  regexReplace($$, '', '')",
						")),",
						"          city = \"Dallas\",",
						"          state = \"Texas\") ~> derivedColumns3",
						"derivedColumns3 select(mapColumn(",
						"          restaurant_name,",
						"          inspection_score,",
						"          inspection_type = {Inspection Type},",
						"          inspection_date = {Inspection Date},",
						"          zipcode,",
						"          street_address = {Street Address},",
						"          city,",
						"          state,",
						"          each(match(startsWith(name,\"Violation Description\")),",
						"               lower(regexReplace($$,'\\\\s*-\\\\s*','')) = $$),",
						"          each(match(startsWith(name,\"Violation Detail\")),",
						"               lower(regexReplace($$,'\\\\s*-\\\\s*','')) = $$),",
						"          each(match(startsWith(name,\"Violation Memo\")),",
						"               lower(regexReplace($$,'\\\\s*-\\\\s*','')) = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumns1, zipcodes join(zip_code == toInteger(zipcode),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 derive(zipcode = iif(isNull(zipcode), toInteger(-99999), toInteger(zipcode))) ~> derivedColumn1",
						"derivedColumn2 window(over(allKey),",
						"     asc(1, true),",
						"     row_num = rowNumber()) ~> window1",
						"window1 filter(row_num == 1) ~> filter1",
						"source derive(allKey = sha2(256, columns())) ~> derivedColumn2",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['dallas.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          restaurant_name,",
						"          street_address,",
						"          zipcode,",
						"          city,",
						"          state,",
						"          inspection_type,",
						"          inspection_date,",
						"          inspection_score,",
						"          each(match(startsWith(name,\"violation\")),",
						"               regexReplace($$,' ','_') = $$)",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_dallas')]",
				"[concat(variables('factoryId'), '/datasets/ds_dallas_zipcodes')]",
				"[concat(variables('factoryId'), '/datasets/ds_parquet_dallas')]"
			]
		}
	]
}