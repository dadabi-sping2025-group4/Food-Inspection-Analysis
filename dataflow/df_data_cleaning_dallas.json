{
	"name": "df_data_cleaning_dallas",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_dallas",
						"type": "DatasetReference"
					},
					"name": "source"
				},
				{
					"dataset": {
						"referenceName": "ds_dallas_zipcodes",
						"type": "DatasetReference"
					},
					"name": "zipcodes"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_parquet_dallas",
						"type": "DatasetReference"
					},
					"name": "sink"
				}
			],
			"transformations": [
				{
					"name": "derivedColumns1"
				},
				{
					"name": "derivedColumns3"
				},
				{
					"name": "select1"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "window1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Restaurant Name} as string,",
				"          {Inspection Type} as string,",
				"          {Inspection Date} as date,",
				"          {Inspection Score} as short,",
				"          {Street Number} as integer,",
				"          {Street Name} as string,",
				"          {Street Direction} as string,",
				"          {Street Type} as string,",
				"          {Street Unit} as string,",
				"          {Street Address} as string,",
				"          {Zip Code} as string,",
				"          {Violation Description - 1} as string,",
				"          {Violation Points - 1} as double,",
				"          {Violation Detail - 1} as string,",
				"          {Violation Memo - 1} as string,",
				"          {Violation Description - 2} as string,",
				"          {Violation Points - 2} as double,",
				"          {Violation Detail - 2} as string,",
				"          {Violation Memo - 2} as string,",
				"          {Violation Description - 3} as string,",
				"          {Violation Points - 3} as double,",
				"          {Violation Detail - 3} as string,",
				"          {Violation Memo - 3} as string,",
				"          {Violation Description - 4} as string,",
				"          {Violation Points - 4} as double,",
				"          {Violation Detail - 4} as string,",
				"          {Violation Memo - 4} as string,",
				"          {Violation Description - 5} as string,",
				"          {Violation Points - 5} as double,",
				"          {Violation Detail - 5} as string,",
				"          {Violation Memo - 5} as string,",
				"          {Violation Description - 6} as string,",
				"          {Violation Points - 6} as double,",
				"          {Violation Detail - 6} as string,",
				"          {Violation Memo - 6} as string,",
				"          {Violation Description - 7} as string,",
				"          {Violation Points - 7} as double,",
				"          {Violation Detail - 7} as string,",
				"          {Violation Memo - 7} as string,",
				"          {Violation Description - 8} as string,",
				"          {Violation Points - 8} as double,",
				"          {Violation Detail - 8} as string,",
				"          {Violation Memo - 8} as string,",
				"          {Violation Description - 9} as string,",
				"          {Violation Points - 9} as double,",
				"          {Violation Detail - 9} as string,",
				"          {Violation Memo - 9} as string,",
				"          {Violation Description - 10} as string,",
				"          {Violation Points - 10} as double,",
				"          {Violation Detail - 10} as string,",
				"          {Violation Memo - 10} as string,",
				"          {Violation Description - 11} as string,",
				"          {Violation Points - 11} as double,",
				"          {Violation Detail - 11} as string,",
				"          {Violation Memo - 11} as string,",
				"          {Violation Description - 12} as string,",
				"          {Violation Points - 12} as double,",
				"          {Violation Detail - 12} as string,",
				"          {Violation Memo - 12} as string,",
				"          {Violation Description - 13} as string,",
				"          {Violation Points - 13} as double,",
				"          {Violation Detail - 13} as string,",
				"          {Violation Memo - 13} as string,",
				"          {Violation Description - 14} as string,",
				"          {Violation Points - 14} as double,",
				"          {Violation Detail - 14} as string,",
				"          {Violation Memo - 14} as string,",
				"          {Violation Description - 15} as string,",
				"          {Violation Points - 15} as double,",
				"          {Violation Detail - 15} as string,",
				"          {Violation Memo - 15} as string,",
				"          {Violation Description - 16} as string,",
				"          {Violation Points - 16} as double,",
				"          {Violation Detail - 16} as string,",
				"          {Violation Memo - 16} as string,",
				"          {Violation Description - 17} as string,",
				"          {Violation Points - 17} as double,",
				"          {Violation Detail - 17} as string,",
				"          {Violation Memo - 17} as string,",
				"          {Violation Description - 18} as string,",
				"          {Violation Points - 18} as double,",
				"          {Violation Detail - 18} as string,",
				"          {Violation Memo - 18} as string,",
				"          {Violation Description - 19} as string,",
				"          {Violation Points - 19} as double,",
				"          {Violation Detail - 19} as string,",
				"          {Violation Memo - 19} as string,",
				"          {Violation Description - 20} as string,",
				"          {Violation Points - 20} as double,",
				"          {Violation Detail - 20} as string,",
				"          {Violation  Memo - 20} as string,",
				"          {Violation Description - 21} as string,",
				"          {Violation Points - 21} as double,",
				"          {Violation Detail - 21} as string,",
				"          {Violation Memo - 21} as string,",
				"          {Violation Description - 22} as string,",
				"          {Violation Points - 22} as string,",
				"          {Violation Detail - 22} as string,",
				"          {Violation Memo - 22} as string,",
				"          {Violation Description - 23} as string,",
				"          {Violation Points - 23} as string,",
				"          {Violation Detail - 23} as string,",
				"          {Violation Memo - 23} as string,",
				"          {Violation Description - 24} as string,",
				"          {Violation Points - 24} as string,",
				"          {Violation Detail - 24} as string,",
				"          {Violation Memo - 24} as string,",
				"          {Violation Description - 25} as string,",
				"          {Violation Points - 25} as string,",
				"          {Violation Detail - 25} as string,",
				"          {Violation Memo - 25} as string,",
				"          {Inspection Month} as string,",
				"          {Inspection Year} as string,",
				"          {Lat Long Location} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     multiLineRow: true) ~> source",
				"source(output(",
				"          zipcode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> zipcodes",
				"filter1 derive(restaurant_name = iif({Restaurant Name} == '3606' || {Restaurant Name} == '13209', 'Unknown', {Restaurant Name}),",
				"          inspection_score = abs(toInteger({Inspection Score})),",
				"          zip_code = toInteger(substring({Zip Code}, 0, 5))) ~> derivedColumns1",
				"derivedColumn1 derive(each(match(startsWith(name,'Violation Description')), $$ = iif(",
				"  isNull($$),",
				"  'Unknown',",
				"  regexReplace($$, '\\\\*', '')",
				")),",
				"          each(match(startsWith(name,'Violation Detail')||startsWith(name,'Violation Memo')), $$ = iif(",
				"  isNull($$),",
				"  'Unknown',",
				"  regexReplace($$, '', '')",
				")),",
				"          city = \"Dallas\",",
				"          state = \"Texas\") ~> derivedColumns3",
				"derivedColumns3 select(mapColumn(",
				"          restaurant_name,",
				"          inspection_score,",
				"          inspection_type = {Inspection Type},",
				"          inspection_date = {Inspection Date},",
				"          zipcode,",
				"          street_address = {Street Address},",
				"          city,",
				"          state,",
				"          each(match(startsWith(name,\"Violation Description\")),",
				"               lower(regexReplace($$,'\\\\s*-\\\\s*','')) = $$),",
				"          each(match(startsWith(name,\"Violation Detail\")),",
				"               lower(regexReplace($$,'\\\\s*-\\\\s*','')) = $$),",
				"          each(match(startsWith(name,\"Violation Memo\")),",
				"               lower(regexReplace($$,'\\\\s*-\\\\s*','')) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumns1, zipcodes join(zip_code == toInteger(zipcode),",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(zipcode = iif(isNull(zipcode), toInteger(-99999), toInteger(zipcode))) ~> derivedColumn1",
				"derivedColumn2 window(over(allKey),",
				"     asc(1, true),",
				"     row_num = rowNumber()) ~> window1",
				"window1 filter(row_num == 1) ~> filter1",
				"source derive(allKey = sha2(256, columns())) ~> derivedColumn2",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['dallas.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          restaurant_name,",
				"          street_address,",
				"          zipcode,",
				"          city,",
				"          state,",
				"          inspection_type,",
				"          inspection_date,",
				"          inspection_score,",
				"          each(match(startsWith(name,\"violation\")),",
				"               regexReplace($$,' ','_') = $$)",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink"
			]
		}
	}
}