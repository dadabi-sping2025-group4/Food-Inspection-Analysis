{
	"name": "df_data_cleaning_chicago",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "chicago_bronze",
						"type": "DatasetReference"
					},
					"name": "bronzeChicagoTSV"
				},
				{
					"dataset": {
						"referenceName": "chicago_zipcodes",
						"type": "DatasetReference"
					},
					"name": "chicagoZipcodes"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "chicago_parquet_silver",
						"type": "DatasetReference"
					},
					"name": "silverChicagoParquet"
				}
			],
			"transformations": [
				{
					"name": "joinWithValidChicagoZipcodes"
				},
				{
					"name": "filterOutNonChicagoCityRecords"
				},
				{
					"name": "handlingNullValues"
				},
				{
					"name": "finalColumnSelection"
				},
				{
					"name": "handlingStateColumnNulls"
				},
				{
					"name": "allKeyDerivedColumn"
				},
				{
					"name": "rowNumWindow"
				},
				{
					"name": "filterDuplicateRows"
				},
				{
					"name": "columnsSelection"
				},
				{
					"name": "columnLookups"
				},
				{
					"name": "trimmingColumnSpaces"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Inspection ID} as integer,",
				"          {DBA Name} as string,",
				"          {AKA Name} as string,",
				"          {License #} as integer,",
				"          {Facility Type} as string,",
				"          Risk as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          Zip as integer,",
				"          {Inspection Date} as date,",
				"          {Inspection Type} as string,",
				"          Results as string,",
				"          Violations as string,",
				"          Latitude as string,",
				"          Longitude as string,",
				"          Location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> bronzeChicagoTSV",
				"source(output(",
				"          zipcode as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> chicagoZipcodes",
				"columnsSelection, chicagoZipcodes join(zip == zipcode,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinWithValidChicagoZipcodes",
				"joinWithValidChicagoZipcodes filter(isNull(city) || instr(lower(city), 'chicago') != 0) ~> filterOutNonChicagoCityRecords",
				"columnLookups derive(business_name = iif(isNull(business_name) || trim(business_name)=='', 'Unknown', business_name),",
				"          city = iif(isNull(city), 'Unknown', 'Chicago'),",
				"          license_number = iif(\r",
				"    isNull(license_number) || license_number == 0,\r",
				"    -9999,\r",
				"    license_number\r",
				"),",
				"          risk = iif(\r",
				"    risk == 'Risk 1 (High)', 'High',\r",
				"    iif(\r",
				"        risk == 'Risk 2 (Medium)', 'Medium',\r",
				"        iif(\r",
				"            risk == 'Risk 3 (Low)', 'Low',\r",
				"            iif(\r",
				"                risk == 'All', 'Invalid',\r",
				"                'Unknown'\r",
				"            )\r",
				"        )\r",
				"    )\r",
				"),",
				"          facility_type = iif(\r",
				"    isNull(facility_type) || trim(facility_type) == '', \r",
				"    'Unknown', \r",
				"    facility_type\r",
				"),",
				"          zipcode = iif(isNull(zipcode), toInteger(-9999), toInteger(zipcode)),",
				"          violations = iif(isNull(violations), 'Unknown', violations)) ~> handlingNullValues",
				"handlingStateColumnNulls select(mapColumn(",
				"          inspection_id,",
				"          business_name,",
				"          license_number,",
				"          facility_type,",
				"          risk,",
				"          street_address = address,",
				"          city,",
				"          state,",
				"          zipcode,",
				"          inspection_date,",
				"          inspection_type,",
				"          result = results,",
				"          violations",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> finalColumnSelection",
				"handlingNullValues derive(state = iif(",
				"    lower(city) == 'chicago', ",
				"    'IL',",
				"    iif(",
				"        isNull(state) && lower(city) == 'unknown',",
				"        'Unknown',",
				"        state",
				"    )",
				")) ~> handlingStateColumnNulls",
				"trimmingColumnSpaces derive(allKey = sha2(256, columns())) ~> allKeyDerivedColumn",
				"allKeyDerivedColumn window(over(allKey),",
				"     asc(1, true),",
				"     row_num = rowNumber()) ~> rowNumWindow",
				"rowNumWindow filter(row_num == 1) ~> filterDuplicateRows",
				"filterDuplicateRows select(mapColumn(",
				"          inspection_id = {Inspection ID},",
				"          business_name = {DBA Name},",
				"          license_number = {License #},",
				"          facility_type = {Facility Type},",
				"          risk = Risk,",
				"          address = Address,",
				"          city = City,",
				"          state = State,",
				"          zip = Zip,",
				"          inspection_date = {Inspection Date},",
				"          inspection_type = {Inspection Type},",
				"          results = Results,",
				"          violations = Violations,",
				"          aka_name = {AKA Name}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> columnsSelection",
				"filterOutNonChicagoCityRecords derive(business_name = iif(\r",
				"    regexMatch(business_name, '^[0-9]+$') &&\r",
				"    (isNull(aka_name) || regexMatch(aka_name, '^[0-9]+$')),\r",
				"    'Unknown',\r",
				"    iif(\r",
				"        regexMatch(business_name, '^[0-9]+$') && !regexMatch(aka_name, '^[0-9]+$'),\r",
				"        aka_name,\r",
				"        business_name\r",
				"    )\r",
				"),",
				"          city = iif(\r",
				"    isNull(city) && !isNull(zipcode),\r",
				"    'Chicago',\r",
				"    city\r",
				")) ~> columnLookups",
				"bronzeChicagoTSV derive({DBA Name} = trim({DBA Name}),",
				"          {AKA Name} = trim({AKA Name}),",
				"          {Facility Type} = trim({Facility Type}),",
				"          Risk = trim(Risk),",
				"          Address = trim(Address),",
				"          City = trim(City),",
				"          State = trim(State),",
				"          {Inspection Type} = trim({Inspection Type}),",
				"          Results = trim(Results),",
				"          Violations = trim(Violations)) ~> trimmingColumnSpaces",
				"finalColumnSelection sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          restaurant_name as string,",
				"          inspection_type as string,",
				"          inspection_score as integer,",
				"          inspection_date as date,",
				"          zipcode as integer,",
				"          street_address as string,",
				"          violation_description1 as string,",
				"          violation_description2 as string,",
				"          violation_description3 as string,",
				"          violation_description4 as string,",
				"          violation_description5 as string,",
				"          violation_description6 as string,",
				"          violation_description7 as string,",
				"          violation_description8 as string,",
				"          violation_description9 as string,",
				"          violation_description10 as string,",
				"          violation_description11 as string,",
				"          violation_description12 as string,",
				"          violation_description13 as string,",
				"          violation_description14 as string,",
				"          violation_description15 as string,",
				"          violation_description16 as string,",
				"          violation_description17 as string,",
				"          violation_description18 as string,",
				"          violation_description19 as string,",
				"          violation_description20 as string,",
				"          violation_description21 as string,",
				"          violation_description22 as string,",
				"          violation_description23 as string,",
				"          violation_description24 as string,",
				"          violation_description25 as string,",
				"          violation_detail1 as string,",
				"          violation_detail2 as string,",
				"          violation_detail3 as string,",
				"          violation_detail4 as string,",
				"          violation_detail5 as string,",
				"          violation_detail6 as string,",
				"          violation_detail7 as string,",
				"          violation_detail8 as string,",
				"          violation_detail9 as string,",
				"          violation_detail10 as string,",
				"          violation_detail11 as string,",
				"          violation_detail12 as string,",
				"          violation_detail13 as string,",
				"          violation_detail14 as string,",
				"          violation_detail15 as string,",
				"          violation_detail16 as string,",
				"          violation_detail17 as string,",
				"          violation_detail18 as string,",
				"          violation_detail19 as string,",
				"          violation_detail20 as string,",
				"          violation_detail21 as string,",
				"          violation_detail22 as string,",
				"          violation_detail23 as string,",
				"          violation_detail24 as string,",
				"          violation_detail25 as string,",
				"          violation_memo1 as string,",
				"          violation_memo2 as string,",
				"          violation_memo3 as string,",
				"          violation_memo4 as string,",
				"          violation_memo5 as string,",
				"          violation_memo6 as string,",
				"          violation_memo7 as string,",
				"          violation_memo8 as string,",
				"          violation_memo9 as string,",
				"          violation_memo10 as string,",
				"          violation_memo11 as string,",
				"          violation_memo12 as string,",
				"          violation_memo13 as string,",
				"          violation_memo14 as string,",
				"          violation_memo15 as string,",
				"          violation_memo16 as string,",
				"          violation_memo17 as string,",
				"          violation_memo18 as string,",
				"          violation_memo19 as string,",
				"          violation_memo21 as string,",
				"          violation_memo22 as string,",
				"          violation_memo23 as string,",
				"          violation_memo24 as string,",
				"          violation_memo25 as string",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['chicago_parquet.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> silverChicagoParquet"
			]
		}
	}
}