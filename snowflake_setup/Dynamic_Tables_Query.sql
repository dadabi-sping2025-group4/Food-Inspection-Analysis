-- Dim Business
CREATE OR REPLACE DYNAMIC TABLE FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.DIM_BUSINESS
TARGET_LAG = '1 minute'  -- Adjust based on your refresh requirements
WAREHOUSE = DADABI_WH
AS
SELECT 
    ROW_NUMBER() OVER(ORDER BY loc.LOCATION_SK, b.BUSINESS_NAME) AS BUSINESS_SK,
    loc.LOCATION_SK,
    TRIM(b.BUSINESS_NAME) AS BUSINESS_NAME,
    CASE
        WHEN b.LICENSE_NUMBER = '0' THEN NULL  -- Handle invalid license numbers
        ELSE b.LICENSE_NUMBER
    END AS LICENSE_NUMBER,
    TRIM(b.BUSINESS_TYPE) AS FACILITY_TYPE,
    b.JOB_ID AS DI_JOB_ID,
    CURRENT_TIMESTAMP() AS DI_LOAD_DT
FROM (
    SELECT DISTINCT
        TRIM(ADDRESS) AS ADDRESS,
        ZIPCODE,
        TRIM(BUSINESS_NAME) AS BUSINESS_NAME,
        LICENSE_NUMBER,
        TRIM(BUSINESS_TYPE) AS BUSINESS_TYPE,
        JOB_ID
    FROM FOOD_INSPECTION_DB.RAW_STAGE_SCHEMA.STG_FINAL_TABLE
) AS b
LEFT JOIN FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.DIM_LOCATION loc
    ON b.ADDRESS = loc.STREET_ADDRESS 
    AND b.ZIPCODE = loc.ZIPCODE;


-- Dim Violation
CREATE OR REPLACE DYNAMIC TABLE FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.DIM_VIOLATION (
    VIOLATION_SK,
    VIOLATION_CODE,
    VIOLATION_DESCRIPTION,
    SOURCE,
    DI_JOB_ID,
    DI_LOAD_DT
)
TARGET_LAG = '1 minute'
REFRESH_MODE = AUTO
INITIALIZE = ON_CREATE
WAREHOUSE = DADABI_WH
AS
SELECT 
    ROW_NUMBER() OVER (ORDER BY VIOLATION_CODE, VIOLATION_DESCRIPTION, SOURCE) AS VIOLATION_SK,
    VIOLATION_CODE,
    VIOLATION_DESCRIPTION,
    SOURCE,
    JOB_ID AS DI_JOB_ID,
    CURRENT_DATE() AS DI_LOAD_DT
FROM (
    SELECT DISTINCT 
        VIOLATION_CODE,
        VIOLATION_DESCRIPTION,
        SOURCE,
        JOB_ID
    FROM FOOD_INSPECTION_DB.RAW_STAGE_SCHEMA.STG_FINAL_TABLE
);

-- Dim Location
CREATE OR REPLACE DYNAMIC TABLE FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.DIM_LOCATION (
    LOCATION_SK,
    STREET_ADDRESS,
    CITY,
    STATE,
    ZIPCODE,
    DI_JOB_ID,
    DI_LOAD_DT
)
TARGET_LAG = '1 minute'
REFRESH_MODE = AUTO
INITIALIZE = ON_CREATE
WAREHOUSE = DADABI_WH
AS
SELECT 
    ROW_NUMBER() OVER (ORDER BY ADDRESS, ZIPCODE) AS LOCATION_SK,
    ADDRESS AS STREET_ADDRESS,
    CITY,
    STATE,
    ZIPCODE,
    JOB_ID AS DI_JOB_ID,
    CURRENT_DATE() AS DI_LOAD_DT
FROM (
    SELECT DISTINCT ADDRESS, CITY, STATE, ZIPCODE, JOB_ID
    FROM FOOD_INSPECTION_DB.RAW_STAGE_SCHEMA.STG_FINAL_TABLE
);

-- Fct Inspection
CREATE OR REPLACE DYNAMIC TABLE FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.FCT_INSPECTION
TARGET_LAG = '1 minute'  -- Adjust based on your refresh requirements
WAREHOUSE = DADABI_WH
AS
SELECT 
    ROW_NUMBER() OVER(ORDER BY stg.INSPECTION_ID) AS INSPECTION_SK,
    b.BUSINESS_SK,
    b.LOCATION_SK,
    d.DATE_SK AS INSPECTION_DATE,
    stg.INSPECTION_ID,
    TRIM(stg.INSPECTION_TYPE) AS INSPECTION_TYPE,
    TRIM(stg.RISK) AS RISK,
    TRIM(stg.RESULTS) AS RESULT,
    stg.JOB_ID AS DI_JOB_ID,
    CURRENT_TIMESTAMP() AS DI_LOAD_DT
FROM (
    SELECT DISTINCT
        INSPECTION_ID,
        TRIM(BUSINESS_NAME) AS BUSINESS_NAME,
        TRIM(BUSINESS_TYPE) AS BUSINESS_TYPE,
        LICENSE_NUMBER,
        TRIM(ADDRESS) AS ADDRESS,
        ZIPCODE,
        INSPECTION_DATE,
        TRIM(INSPECTION_TYPE) AS INSPECTION_TYPE,
        TRIM(RISK) AS RISK,
        TRIM(RESULTS) AS RESULTS,
        JOB_ID
    FROM FOOD_INSPECTION_DB.RAW_STAGE_SCHEMA.STG_FINAL_TABLE
) AS stg
JOIN FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.DIM_BUSINESS b 
    ON stg.BUSINESS_NAME = b.BUSINESS_NAME 
    AND stg.BUSINESS_TYPE = b.FACILITY_TYPE 
    AND stg.LICENSE_NUMBER = b.LICENSE_NUMBER
JOIN FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.DIM_LOCATION l 
    ON b.LOCATION_SK = l.LOCATION_SK 
    AND stg.ADDRESS = l.STREET_ADDRESS 
    AND stg.ZIPCODE = l.ZIPCODE
JOIN FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.DIM_DATE d 
    ON stg.INSPECTION_DATE = d.DATE;


-- Bridge Violation Inspection
CREATE OR REPLACE DYNAMIC TABLE FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.BRIDGE_VIOLATION_INSPECTION
TARGET_LAG = '1 minute'  -- Adjust based on your refresh requirements
WAREHOUSE = DADABI_WH
AS
SELECT 
    ROW_NUMBER() OVER(ORDER BY v.VIOLATION_SK, fi.INSPECTION_SK) AS VIOLATION_INSPECTION_SK,
    v.VIOLATION_SK,
    fi.INSPECTION_SK,
    fi.BUSINESS_SK,
    fi.LOCATION_SK,
    fi.INSPECTION_DATE,
    TRIM(stg.VIOLATION_COMMENTS) AS VIOLATION_COMMENT,
    stg.JOB_ID AS DI_JOB_ID,
    CURRENT_TIMESTAMP() AS DI_LOAD_DT
FROM (
    SELECT DISTINCT
        VIOLATION_CODE,
        VIOLATION_DESCRIPTION,
        SOURCE,
        INSPECTION_ID,
        TRIM(VIOLATION_COMMENTS) AS VIOLATION_COMMENTS,
        JOB_ID
    FROM FOOD_INSPECTION_DB.RAW_STAGE_SCHEMA.STG_FINAL_TABLE
    WHERE VIOLATION_CODE IS NOT NULL
) AS stg
JOIN FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.FCT_INSPECTION fi
    ON stg.INSPECTION_ID = fi.INSPECTION_ID
JOIN FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.DIM_VIOLATION v
    ON stg.VIOLATION_CODE = v.VIOLATION_CODE
    AND stg.VIOLATION_DESCRIPTION = v.VIOLATION_DESCRIPTION
    AND stg.SOURCE = v.SOURCE;