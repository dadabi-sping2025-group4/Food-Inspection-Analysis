CREATE OR REPLACE SEQUENCE DIM_BUSINESS_SEQ;
CREATE OR REPLACE SEQUENCE DIM_LOCATION_SEQ;
CREATE OR REPLACE SEQUENCE DIM_VIOLATION_SEQ;
CREATE OR REPLACE SEQUENCE FCT_INSPECTION_SEQ;
CREATE OR REPLACE SEQUENCE BRIDGE_VIOLATION_INSPECTION_SEQ;

----------------------------------------------- DIM_LOCATION -----------------------------------------------------
MERGE INTO FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.DIM_LOCATION as t
USING (SELECT DISTINCT 
                ADDRESS as STREET_ADDRESS,
                CITY,
                STATE,
                ZIPCODE,
                JOB_ID as DI_JOB_ID
        FROM FOOD_INSPECTION_DB.RAW_STAGE_SCHEMA.STG_FINAL_TABLE
) as s
ON s.STREET_ADDRESS = t.STREET_ADDRESS and s.zipcode = t.zipcode
WHEN NOT MATCHED THEN 
INSERT (LOCATION_SK, STREET_ADDRESS, CITY, STATE, ZIPCODE, DI_JOB_ID, DI_LOAD_DT)
VALUES (DIM_LOCATION_SEQ.nextVal, s.STREET_ADDRESS, s.CITY, s.STATE, s.ZIPCODE, s.DI_JOB_ID, current_date());

----------------------------------------------- DIM_BUSINESS -----------------------------------------------------
MERGE INTO FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.DIM_BUSINESS AS t
USING (SELECT DISTINCT 
                l.LOCATION_SK,
                b.BUSINESS_NAME,
                b.LICENSE_NUMBER,
                b.BUSINESS_TYPE as FACILITY_TYPE,
                b.JOB_ID as DI_JOB_ID
        FROM FOOD_INSPECTION_DB.RAW_STAGE_SCHEMA.STG_FINAL_TABLE b
        LEFT JOIN FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.DIM_LOCATION l 
        ON b.ADDRESS = l.STREET_ADDRESS AND b.ZIPCODE = l.ZIPCODE
    ) as s
ON s.LOCATION_SK = t.LOCATION_SK and s.BUSINESS_NAME = t.BUSINESS_NAME
WHEN NOT MATCHED THEN 
INSERT (BUSINESS_SK, LOCATION_SK, BUSINESS_NAME, FACILITY_TYPE, DI_JOB_ID, DI_LOAD_DT)
VALUES (DIM_BUSINESS_SEQ.nextVal, s.LOCATION_SK, s.BUSINESS_NAME, s.FACILITY_TYPE, s.DI_JOB_ID, current_date());

----------------------------------------------- DIM_DATE -----------------------------------------------------
SET (START_DATE, END_DATE) = ('2019-12-31','2025-12-31');
SET NUM_OF_DAYS = (SELECT DATEDIFF(DAY, TO_DATE($START_DATE), TO_DATE($END_DATE)));
 
CREATE OR REPLACE TABLE DIM_DATE AS
    WITH job_id_cte AS (
        SELECT MAX(JOB_ID) AS DI_JOB_ID
        FROM FOOD_INSPECTION_DB.RAW_STAGE_SCHEMA.STG_FINAL_TABLE
    ),
    dates AS (
        SELECT 
            ROW_NUMBER() OVER(ORDER BY SEQ4()) AS RN_ID,
            TO_DATE(DATEADD(DAY, ROW_NUMBER() OVER(ORDER BY SEQ4()), TO_DATE($START_DATE))) AS DT
        FROM TABLE(GENERATOR(ROWCOUNT => $NUM_OF_DAYS))
    )
    SELECT
        TO_NUMBER(CONCAT(YEAR(DT), LPAD(MONTH(DT), 2, '0'), LPAD(DAY(DT), 2, '0'))) AS DATE_SK,
        DT AS DATE,
        DAYNAME(DT) AS DAY_ABBR,
        TO_CHAR(DT, 'MMMM') AS MONTH_ABBR,
        QUARTER(DT) AS QUARTER_NUM,
        YEAR(DT) AS YEAR_NUM,
        j.DI_JOB_ID,
        CURRENT_DATE AS DI_LOAD_DT,
    FROM dates d
    CROSS JOIN job_id_cte j;

----------------------------------------------- DIM_VIOLATION -----------------------------------------------------
MERGE INTO FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.DIM_VIOLATION AS t
USING (SELECT DISTINCT 
                VIOLATION_CODE,
                VIOLATION_DESCRIPTION,
                SOURCE,
                JOB_ID as DI_JOB_ID
        FROM FOOD_INSPECTION_DB.RAW_STAGE_SCHEMA.STG_FINAL_TABLE
) as s
ON s.VIOLATION_CODE = t.VIOLATION_CODE and s.VIOLATION_DESCRIPTION = t.VIOLATION_DESCRIPTION and s.SOURCE = t.SOURCE
WHEN NOT MATCHED THEN 
INSERT (VIOLATION_SK, VIOLATION_CODE, VIOLATION_DESCRIPTION, SOURCE, DI_JOB_ID, DI_LOAD_DT)
VALUES (DIM_VIOLATION_SEQ.nextVal, s.VIOLATION_CODE, s.VIOLATION_DESCRIPTION, s.SOURCE, s.DI_JOB_ID, current_date());

----------------------------------------------- FCT_INSPECTION -----------------------------------------------------
MERGE INTO FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.FCT_INSPECTION AS t
USING ( SELECT distinct
            stg.INSPECTION_ID,
            b.BUSINESS_SK AS BUSINESS_SK,
            b.LOCATION_SK AS LOCATION_SK,
            d.DATE_SK AS INSPECTION_DATE,
            stg.INSPECTION_TYPE AS INSPECTION_TYPE,
            stg.RISK AS RISK,
            stg.RESULTS AS RESULT,
            stg.JOB_ID AS DI_JOB_ID
        FROM FOOD_INSPECTION_DB.RAW_STAGE_SCHEMA.STG_FINAL_TABLE stg
        JOIN FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.DIM_BUSINESS b 
            ON stg.BUSINESS_NAME = b.BUSINESS_NAME 
           AND stg.BUSINESS_TYPE = b.FACILITY_TYPE 
           AND stg.LICENSE_NUMBER = b.LICENSE_NUMBER
        JOIN FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.DIM_LOCATION l 
            ON b.LOCATION_SK = l.LOCATION_SK 
           AND stg.ADDRESS = l.STREET_ADDRESS 
           AND stg.ZIPCODE = l.ZIPCODE
        JOIN FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.DIM_DATE d 
            ON stg.INSPECTION_DATE = d.DATE
    ) as s
ON s.INSPECTION_ID = t.INSPECTION_ID
WHEN NOT MATCHED THEN 
INSERT (INSPECTION_SK, BUSINESS_SK, LOCATION_SK, INSPECTION_DATE, INSPECTION_ID, INSPECTION_TYPE, RISK, RESULT, DI_JOB_ID, DI_LOAD_DT)
VALUES (FCT_INSPECTION_SEQ.nextVal, s.BUSINESS_SK, s.LOCATION_SK, s.INSPECTION_DATE, s.INSPECTION_ID, s.INSPECTION_TYPE, s.RISK, s.RESULT, s.DI_JOB_ID, current_date());

----------------------------------------------- BRIDGE_VIOLATION_INSPECTION -----------------------------------------------------
MERGE INTO FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.BRIDGE_VIOLATION_INSPECTION t
USING ( SELECT DISTINCT
            v.VIOLATION_SK,
            fi.INSPECTION_SK,
            fi.BUSINESS_SK,
            fi.LOCATION_SK,
            fi.INSPECTION_DATE,
            stg.VIOLATION_COMMENTS,
            stg.JOB_ID AS DI_JOB_ID
        FROM FOOD_INSPECTION_DB.RAW_STAGE_SCHEMA.STG_FINAL_TABLE stg
        JOIN FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.FCT_INSPECTION fi
            ON stg.INSPECTION_ID = fi.INSPECTION_ID
        JOIN FOOD_INSPECTION_DB.FOOD_INSPECTION_SCHEMA.DIM_VIOLATION v
            ON stg.VIOLATION_CODE = v.VIOLATION_CODE
            AND stg.VIOLATION_DESCRIPTION = v.VIOLATION_DESCRIPTION
            AND stg.SOURCE = v.SOURCE
    ) as s
ON s.INSPECTION_SK = t.INSPECTION_SK AND s.VIOLATION_SK = t.VIOLATION_SK
WHEN NOT MATCHED THEN 
INSERT (VIOLATION_INSPECTION_SK, VIOLATION_SK, INSPECTION_SK, BUSINESS_SK, LOCATION_SK, INSPECTION_DATE, VIOLATION_COMMENT, DI_JOB_ID, DI_LOAD_DT)
VALUES (BRIDGE_VIOLATION_INSPECTION_SEQ.nextVal, s.VIOLATION_SK, s.INSPECTION_SK, s.BUSINESS_SK, s.LOCATION_SK, s.INSPECTION_DATE, s.VIOLATION_COMMENTS, s.DI_JOB_ID, current_date());